import React, { useState, useEffect, useRef, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import app from './firebase';
import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, onAuthStateChanged, signOut } from 'firebase/auth';
import { getDatabase, ref, set, onValue } from 'firebase/database';
import debounce from 'lodash.debounce';
import LoginPage from './LoginPage';

const App = () => {
Â  // --- Authentication States ---
Â  const [isAuthenticated, setIsAuthenticated] = useState(false);
Â  const [loadingAuth, setLoadingAuth] = useState(true);

Â  // --- Helper Tool States ---
Â  const [messages, setMessages] = useState([]);
Â  const [input, setInput] = useState('');
Â  const messagesEndRef = useRef(null);

Â  // --- Clipboard States ---
Â  const [laptopClipboard, setLaptopClipboard] = useState('');
Â  const [phoneClipboard, setPhoneClipboard] = useState('');

Â  // --- Firebase States ---
Â  const [db, setDb] = useState(null);
Â  const [auth, setAuth] = useState(null);
Â  const [userId, setUserId] = useState(null);

Â  const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
Â  const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
Â  const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

Â  // --- Firebase Initialization and Authentication ---
Â  useEffect(() => {
Â  Â  try {
Â  Â  Â  const authInstance = getAuth(app);
Â  Â  Â  const dbInstance = getDatabase(app);
Â  Â  Â  setAuth(authInstance);
Â  Â  Â  setDb(dbInstance);
Â  Â  Â  const unsubscribe = onAuthStateChanged(authInstance, (user) => {
Â  Â  Â  Â  if (user) {
Â  Â  Â  Â  Â  setUserId(user.uid);
Â  Â  Â  Â  Â  setIsAuthenticated(true);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  setUserId(null);
Â  Â  Â  Â  Â  setIsAuthenticated(false);
Â  Â  Â  Â  }
Â  Â  Â  Â  setLoadingAuth(false);
Â  Â  Â  });
Â  Â  Â  return () => unsubscribe();
Â  Â  } catch (error) {
Â  Â  Â  console.error("Firebase initialization failed:", error);
Â  Â  Â  setLoadingAuth(false);
Â  Â  }
Â  }, []);

Â  // --- Clipboard Firebase Data Listener ---
Â  useEffect(() => {
Â  Â  if (!db || !userId || !isAuthenticated) return;
Â  Â  const clipboardPath = `artifacts/${appId}/users/${userId}/clipboard`;
Â  Â  const clipboardRef = ref(db, clipboardPath);
Â  Â  const unsubscribe = onValue(clipboardRef, (snapshot) => {
Â  Â  Â  const data = snapshot.val();
Â  Â  Â  if (data) {
Â  Â  Â  Â  setLaptopClipboard(data.laptop || '');
Â  Â  Â  Â  setPhoneClipboard(data.phone || '');
Â  Â  Â  } else {
Â  Â  Â  Â  setLaptopClipboard('');
Â  Â  Â  Â  setPhoneClipboard('');
Â  Â  Â  }
Â  Â  }, (error) => {
Â  Â  Â  console.error("Error fetching clipboard data:", error);
Â  Â  });
Â  Â  return () => unsubscribe();
Â  }, [db, userId, appId, isAuthenticated]);

Â  const updateClipboardDebounced = useCallback(
Â  Â  debounce((laptop, phone) => {
Â  Â  Â  if (db && userId && isAuthenticated) {
Â  Â  Â  Â  const clipboardPath = `artifacts/${appId}/users/${userId}/clipboard`;
Â  Â  Â  Â  set(ref(db, clipboardPath), { laptop, phone })
Â  Â  Â  Â  Â  .catch(error => console.error("Error writing clipboard data (debounced):", error));
Â  Â  Â  }
Â  Â  }, 500),
Â  Â  [db, userId, appId, isAuthenticated]
Â  );

Â  const saveClipboardNow = useCallback((laptop, phone) => {
Â  Â  if (db && userId && isAuthenticated) {
Â  Â  Â  const clipboardPath = `artifacts/${appId}/users/${userId}/clipboard`;
Â  Â  Â  set(ref(db, clipboardPath), { laptop, phone })
Â  Â  Â  Â  .catch(error => console.error("Error writing clipboard data (immediate):", error));
Â  Â  }
Â  }, [db, userId, appId, isAuthenticated]);

Â  const handleLaptopChange = (e) => {
Â  Â  const value = e.target.value;
Â  Â  setLaptopClipboard(value);
Â  Â  updateClipboardDebounced(value, phoneClipboard);
Â  };

Â  const handlePhoneChange = (e) => {
Â  Â  const value = e.target.value;
Â  Â  setPhoneClipboard(value);
Â  Â  updateClipboardDebounced(laptopClipboard, value);
Â  };

Â  const handleCopyClipboardText = (textToCopy) => {
Â  Â  const el = document.createElement('textarea');
Â  Â  el.value = textToCopy;
Â  Â  el.setAttribute('readonly', '');
Â  Â  el.style.position = 'absolute';
Â  Â  el.style.left = '-9999px';
Â  Â  document.body.appendChild(el);
Â  Â  el.select();
Â  Â  try {
Â  Â  Â  document.execCommand('copy');
Â  Â  Â  console.log('Text copied to clipboard!');
Â  Â  } catch (err) {
Â  Â  Â  console.error('Failed to copy text: ', err);
Â  Â  } finally {
Â  Â  Â  document.body.removeChild(el);
Â  Â  }
Â  };

Â  const scrollToBottom = () => {
Â  Â  messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
Â  };

Â  useEffect(() => {
Â  Â  scrollToBottom();
Â  }, [messages]);

Â  const handleSendMessage = async () => {
Â  Â  if (input.trim() === '') return;
Â  Â  const userMessage = { text: input, sender: 'user' };
Â  Â  setMessages((prevMessages) => [...prevMessages, userMessage]);
Â  Â  setInput('');
Â  Â  const typingIndicator = { text: 'Supa Bam Tool is typing...', sender: 'tool', id: 'typing' };
Â  Â  setMessages((prevMessages) => [...prevMessages, typingIndicator]);
Â  Â  let toolResponseText = "I'm not sure how to respond to that.";
Â  Â  try {
Â  Â  Â  const apiUrl = `/api/ask`;

Â  Â  Â  // ðŸ’¡ NEW: Map the state messages to the Gemini API format for conversation history
Â  Â  Â  const chatHistory = messages
Â  Â  Â  Â  .filter(msg => msg.id !== 'typing') // Filter out the temporary typing indicator
Â  Â  Â  Â  .map(msg => ({
Â  Â  Â  Â  Â  role: msg.sender === 'user' ? 'user' : 'model',
Â  Â  Â  Â  Â  parts: [{ text: msg.text }]
Â  Â  Â  Â  }));
Â  Â  Â  
Â  Â  Â  // Add the new user message to the history before sending
Â  Â  Â  chatHistory.push({ role: 'user', parts: [{ text: input }] });

Â  Â  Â  // Send the entire chat history in the payload
Â  Â  Â  const payload = { contents: chatHistory };
Â  Â  Â  
Â  Â  Â  const response = await fetch(apiUrl, {
Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  Â  body: JSON.stringify(payload)
Â  Â  Â  });
Â  Â  Â  const result = await response.json();
Â  Â  Â  if (result.candidates && result.candidates.length > 0 &&
Â  Â  Â  Â  result.candidates[0].content && result.candidates[0].content.parts &&
Â  Â  Â  Â  result.candidates[0].content.parts.length > 0) {
Â  Â  Â  Â  toolResponseText = result.candidates[0].content.parts[0].text;
Â  Â  Â  } else {
Â  Â  Â  Â  console.warn('Intelligent Tool API response structure unexpected:', result);
Â  Â  Â  Â  toolResponseText = "I received an empty response from the intelligent tool. Please try again.";
Â  Â  Â  }
Â  Â  Â  setMessages((prevMessages) =>
Â  Â  Â  Â  prevMessages
Â  Â  Â  Â  Â  .filter((msg) => msg.id !== 'typing')
Â  Â  Â  Â  Â  .concat({ text: toolResponseText, sender: 'tool' })
Â  Â  Â  );
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error fetching tool response:', error);
Â  Â  Â  setMessages((prevMessages) =>
Â  Â  Â  Â  prevMessages
Â  Â  Â  Â  Â  .filter((msg) => msg.id !== 'typing')
Â  Â  Â  Â  Â  .concat({ text: "Oops! Something went wrong while connecting to the intelligent processing unit. Please try again.", sender: 'tool' })
Â  Â  Â  );
Â  Â  }
Â  };

Â  const handleKeyPress = (e) => {
Â  Â  if (e.key === 'Enter' && !e.shiftKey) {
Â  Â  Â  e.preventDefault();
Â  Â  Â  handleSendMessage();
Â  Â  }
Â  };

Â  const renderMessageContent = (messageText) => {
Â  Â  const codeBlockRegex = /```(\w+)?\n([\s\S]*?)\n```/g;
Â  Â  const parts = [];
Â  Â  let lastIndex = 0;
Â  Â  let match;
Â  Â  while ((match = codeBlockRegex.exec(messageText)) !== null) {
Â  Â  Â  const [fullMatch, language, codeContent] = match;
Â  Â  Â  const preCodeText = messageText.substring(lastIndex, match.index);
Â  Â  Â  if (preCodeText) {
Â  Â  Â  Â  preCodeText.split('\n').forEach((line, i) => {
Â  Â  Â  Â  Â  if (line.trim() !== '') {
Â  Â  Â  Â  Â  Â  parts.push(<p key={`text-${lastIndex}-${i}`}>{line}</p>);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });
Â  Â  Â  }
Â  Â  Â  parts.push(
Â  Â  Â  Â  <div key={`code-${match.index}`} className="relative my-2">
Â  Â  Â  Â  Â  <pre className="bg-gray-700 text-white p-3 rounded-md overflow-x-auto text-sm">
Â  Â  Â  Â  Â  Â  <code className={`language-${language || 'plaintext'}`}>{codeContent}</code>
Â  Â  Â  Â  Â  </pre>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => handleCopyClipboardText(codeContent)}
Â  Â  Â  Â  Â  Â  className="absolute top-2 right-2 bg-gray-600 hover:bg-gray-500 text-white text-xs px-2 py-1 rounded-md transition duration-200 ease-in-out"
Â  Â  Â  Â  Â  Â  title="Copy code"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Copy
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  );
Â  Â  Â  lastIndex = match.index + fullMatch.length;
Â  Â  }
Â  Â  const remainingText = messageText.substring(lastIndex);
Â  Â  if (remainingText) {
Â  Â  Â  remainingText.split('\n').forEach((line, i) => {
Â  Â  Â  Â  if (line.trim() !== '') {
Â  Â  Â  Â  Â  parts.push(<p key={`text-${lastIndex}-${i}`}>{line}</p>);
Â  Â  Â  Â  }
Â  Â  Â  });
Â  Â  }
Â  Â  return parts;
Â  };

Â  const handleLogout = async () => {
Â  Â  if (auth) {
Â  Â  Â  try {
Â  Â  Â  Â  await signOut(auth);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error logging out:", error);
Â  Â  Â  }
Â  Â  }
Â  };

Â  if (loadingAuth) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen bg-gray-900 flex items-center justify-center">
Â  Â  Â  Â  <p className="text-gray-300 text-lg">Lets goooooo!!</p>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (!isAuthenticated) {
Â  Â  return <LoginPage />;
Â  }

Â  return (
Â  Â  <div className="min-h-screen bg-gray-900 flex items-center justify-center p-4 font-sans antialiased">
Â  Â  Â  <div className="flex flex-col md:flex-row w-full max-w-6xl mx-auto bg-gray-800 rounded-xl shadow-2xl overflow-hidden">
Â  Â  Â  Â  
Â  Â  Â  Â  <div className="p-4 bg-gray-800 border-b md:border-b-0 md:border-r border-gray-700 md:w-1/2">
Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-200 mb-2">Laptop Clipboard</h3>
Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  rows="3"
Â  Â  Â  Â  Â  Â  className="w-full p-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-200 ease-in-out resize-y bg-gray-700 text-gray-100"
Â  Â  Â  Â  Â  Â  value={laptopClipboard}
Â  Â  Â  Â  Â  Â  onChange={handleLaptopChange}
Â  Â  Â  Â  Â  Â  placeholder="Type or paste text here..."
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <div className="mt-2 flex space-x-2">
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => handleCopyClipboardText(laptopClipboard)}
Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-200 ease-in-out"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Copy
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => saveClipboardNow(laptopClipboard, phoneClipboard)}
Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition duration-200 ease-in-out"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Save
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  setLaptopClipboard('');
Â  Â  Â  Â  Â  Â  Â  Â  saveClipboardNow(laptopClipboard, '');
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 transition duration-200 ease-in-out"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Clear
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-200 mt-4 mb-2">Gigi's Phone Clipboard</h3>
Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  rows="3"
Â  Â  Â  Â  Â  Â  className="w-full p-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-200 ease-in-out resize-y bg-gray-700 text-gray-100"
Â  Â  Â  Â  Â  Â  value={phoneClipboard}
Â  Â  Â  Â  Â  Â  onChange={handlePhoneChange}
Â  Â  Â  Â  Â  Â  placeholder="Type or paste text here..."
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <div className="mt-2 flex space-x-2">
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => handleCopyClipboardText(phoneClipboard)}
Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-200 ease-in-out"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Copy
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => saveClipboardNow(laptopClipboard, phoneClipboard)}
Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition duration-200 ease-in-out"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Save
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  setPhoneClipboard('');
Â  Â  Â  Â  Â  Â  Â  Â  saveClipboardNow(laptopClipboard, '');
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 transition duration-200 ease-in-out"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Clear
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  
Â  Â  Â  Â  <div className="flex flex-col md:w-1/2">
Â  Â  Â  Â  Â  <div className="bg-gradient-to-r from-blue-800 to-indigo-900 text-white p-4 text-center text-2xl font-semibold rounded-t-xl md:rounded-tr-xl md:rounded-tl-none shadow-md">
Â  Â  Â  Â  Â  Â  Supa Bam Tool for Adine
Â  Â  Â  Â  Â  Â  {userId && (
Â  Â  Â  Â  Â  Â  Â  <div className="text-sm mt-1 opacity-80">
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={handleLogout}
Â  Â  Â  Â  Â  Â  Â  className="mt-2 px-3 py-1 bg-red-600 hover:bg-red-700 text-white text-sm rounded-md transition duration-200 ease-in-out"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Logout
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div className="flex-1 p-4 overflow-y-auto h-96 custom-scrollbar bg-gray-700">
Â  Â  Â  Â  Â  Â  {messages.length === 0 && (
Â  Â  Â  Â  Â  Â  Â  <div className="text-center text-gray-400 mt-10">
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  {messages.map((msg, index) => (
Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  key={index}
Â  Â  Â  Â  Â  Â  Â  Â  className={`flex mb-3 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  msg.sender === 'user' ? 'justify-end' : 'justify-start'
Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`max-w-[85%] p-3 rounded-lg shadow-sm ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  msg.sender === 'user'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'bg-blue-600 text-white rounded-br-none'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'bg-gray-600 text-gray-100 rounded-bl-none'
Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {renderMessageContent(msg.text)}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  <div ref={messagesEndRef} />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div className="p-4 bg-gray-800 border-t border-gray-700 flex items-center rounded-b-xl md:rounded-bl-xl md:rounded-br-none">
Â  Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  Â  className="flex-1 p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-200 ease-in-out resize-none h-12 overflow-hidden bg-gray-700 text-gray-100"
Â  Â  Â  Â  Â  Â  Â  placeholder=""
Â  Â  Â  Â  Â  Â  Â  value={input}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  setInput(e.target.value);
Â  Â  Â  Â  Â  Â  Â  Â  e.target.style.height = 'auto';
Â  Â  Â  Â  Â  Â  Â  Â  e.target.style.height = (e.target.scrollHeight) + 'px';
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  onKeyPress={handleKeyPress}
Â  Â  Â  Â  Â  Â  Â  rows={1}
Â  Â  Â  Â  Â  Â  ></textarea>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={handleSendMessage}
Â  Â  Â  Â  Â  Â  Â  className="ml-3 px-5 py-3 bg-blue-700 text-white rounded-full hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-200 ease-in-out shadow-lg transform hover:scale-105"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Send
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default App;